Lesson_1

# Инструкция для работы с Git и удалёнными репозиториями

## Что такое Git?
Git - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.
## Подготовка репозитория
Для создание репозитория необходимо выполнить команду *git init*  в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

## Создание коммитов

### Git add
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*

### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.

### Создание коммитов
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: *git commit -m "<сообщение к коммиту>*. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

## Перемещение между сохранениями
Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: *git checkout <номер коммита>*

## Журнал изменений
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием

## Ветки в Git

### Создание ветки

Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: *git branch <название новой ветки>*

## Слияние веток

Для того чтобы дабавить ветку в текущую ветку используется команда *git merge <name branch>*

## Удаление веток
Для удаления ветки ввести команду "git branch -d 'name branch'"

## Как работать с текстом

# Для создания абзаца используем (#)

## Для создания заголовка используем (##)

**Полужирный текст** или __так__ Для этого нужно поставить (** или __ с двух сторон текста)

*Курсивный текст* или _Так_ Для этого ставим (* или _ с двух сторон)

***Полужирный и курсивный текст*** Для этого необходимо поставить (*** с двух сторон от текста)

~~зачеркнутый текст~~ Для этого ставим (~~ с двух сторон от текста)

Для создания ненумерованных списков используем (*)

* Элемент 1
* Элемент 2

Для создания пронумерованных списков используем цифры

1. Элемент 1
2. Элемент 2

Для вставки цитат используем (>)
> Например вот так

Работа с изображением
![Привет это котик](cat.jpg)

## Как работать со слияние веток

1. Для создания веток используем команду git checkout -b (название ветки)

2. Чтобы проверить на какой ветки вы находитесь команда branch

3. Чтобы слить ветки команда merge

Чтобы перейти на ветку используем checkout _название ветки_

## Как работать с конфликтами

Если появляются конфликты то есть 3 варианта решения проблемы:

1. Оставить то что есть в ветки мастер
2. Заменить информацию на информацию из новой ветки
3. Оставить 2 варианта и сделать редактирование

## Работа с удалёнными репозиториями

Что бы скопировать себе репозиторий используем clone + URL 

URL берем с Github, в начале копируем к себе с помощью fork далее используем кнопку code

Для того что бы данные обновлялись на Github используем функцию push -u origin имя ветки откуда загружать обновления

Не забываем использовать git push  что бы информация обновлялась

Функция git pull -переносить информацию с Github, если там были внесены изменения. Также она производит слияние веток.

Если мы хотим предложить какие-либо изменения в репозитории то используем Pull request-new pull request- проверяем в какую ветку предлагаем изменения и создаем request

